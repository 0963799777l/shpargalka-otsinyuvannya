import streamlit as st
import pandas as pd
from datetime import datetime

# --- –ó–ê–ú–Ü–°–¢–¨ –¶–¨–û–ì–û –ú–û–ñ–ù–ê –ü–Ü–î–ö–õ–Æ–ß–ò–¢–ò –†–ï–ê–õ–¨–ù–£ –ë–ê–ó–£ –î–ê–ù–ò–• ---
# –ü—Ä–æ—Å—Ç–∏–π —Å–ø–∏—Å–æ–∫ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤
ALLOWED_TOKENS = {
    "abc123": False,
    "xyz456": False,
    "test789": False
}

def is_token_valid(token):
    return token in ALLOWED_TOKENS and not ALLOWED_TOKENS[token]

def mark_token_used(token):
    ALLOWED_TOKENS[token] = True

# --- –ü–æ—á–∞—Ç–æ–∫ –¥–æ–¥–∞—Ç–∫—É ---
st.title("üìä –®–ø–∞—Ä–≥–∞–ª–∫–∞ –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è (—Ç—ñ–ª—å–∫–∏ –∑ –¥–æ–∑–≤–æ–ª–æ–º)")

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤ URL (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: ?token=abc123)
token = st.query_params.get("token")

if not token:
    st.warning("üîê –î–ª—è –¥–æ—Å—Ç—É–ø—É –ø–æ—Ç—Ä—ñ–±–µ–Ω —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–∏–π —Ç–æ–∫–µ–Ω —É –ø–æ—Å–∏–ª–∞–Ω–Ω—ñ. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
    st.stop()

if not is_token_valid(token):
    st.error("üö´ –¢–æ–∫–µ–Ω –Ω–µ–¥—ñ–π—Å–Ω–∏–π –∞–±–æ –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π. –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ.")
    st.stop()

# --- –î–æ–∑–≤–æ–ª–µ–Ω–æ –¥–æ—Å—Ç—É–ø ---
mark_token_used(token)

st.success("‚úÖ –î–æ—Å—Ç—É–ø –¥–æ–∑–≤–æ–ª–µ–Ω–æ. –ü–æ—á–∏–Ω–∞–π—Ç–µ —Ä–æ–±–æ—Ç—É –∑ –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è!")

# --- –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è ---
levels = ["–ü–æ—á–∞—Ç–∫–æ–≤–∏–π", "–°–µ—Ä–µ–¥–Ω—ñ–π", "–î–æ—Å—Ç–∞—Ç–Ω—ñ–π", "–í–∏—Å–æ–∫–∏–π"]
boundaries = [3, 6, 9, 12]
criteria = ["–ó–Ω–∞–Ω–Ω—è", "–£–º—ñ–Ω–Ω—è", "–ù–∞–≤–∏—á–∫–∏", "–¶—ñ–Ω–Ω–æ—Å—Ç—ñ"]

level_scores_12 = list(range(1, 13))
level_scores_percent = [int(i * 100 / 12) for i in level_scores_12]

score_values = {}
for crit in criteria:
    score_values[crit] = st.slider(f"–û—Ü—ñ–Ω—ñ—Ç—å –∫—Ä–∏—Ç–µ—Ä—ñ–π '{crit}'", 1, 12, 6)

def get_level(score):
    for i, b in enumerate(boundaries):
        if score <= b:
            return levels[i]
    return levels[-1]

# --- –í–∏–≤—ñ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ ---
st.subheader("üìà –†–µ–∑—É–ª—å—Ç–∞—Ç–∏")
total_score = 0
total_percent = 0
for crit in criteria:
    score = score_values[crit]
    level = get_level(score)
    percent = level_scores_percent[score - 1]
    st.write(f"**{crit}**: {level} ‚Äî {score}/12 ({percent}%)")
    total_score += score
    total_percent += percent

avg_score = total_score / len(criteria)
avg_percent = total_percent / len(criteria)
avg_level = get_level(int(round(avg_score)))

st.markdown("---")
st.success(f"**–°–µ—Ä–µ–¥–Ω—ñ–π —Ä—ñ–≤–µ–Ω—å:** {avg_level}\n\n**–ë–∞–ª:** {avg_score:.2f} –∑ 12\n\n**–í—ñ–¥—Å–æ—Ç–æ–∫:** {avg_percent:.0f}%")
